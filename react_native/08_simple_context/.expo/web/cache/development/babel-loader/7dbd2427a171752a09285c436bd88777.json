{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ThemeContext, { themes } from \"./ThemeContext\";\nimport Headline from \"./Headline\";\nimport Paragraph from \"./Paragraph\";\nimport ThemeButton from \"./ThemeButton\";\nexport default function App() {\n  var _useState = useState({\n    theme: themes.dark\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var toggleTheme = function toggleTheme() {\n    if (state.theme === themes.dark) {\n      setState({\n        theme: themes.light\n      });\n    } else {\n      setState({\n        theme: themes.dark\n      });\n    }\n  };\n\n  return React.createElement(ThemeContext.Provider, {\n    value: state.theme\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Headline, null, \"Context\"), React.createElement(Paragraph, null, \"Context provides a way to pass data through the component tree without having to pass props down manually at every level. In a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\"), React.createElement(ThemeButton, {\n    toggleTheme: toggleTheme\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/gits/tampereoulufullstack2021/TampereOuluFullstack2021/react_native/08_simple_context/App.js"],"names":["StatusBar","React","useState","ThemeContext","themes","Headline","Paragraph","ThemeButton","App","theme","dark","state","setState","toggleTheme","light","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAcC,QAAd,QAA6B,OAA7B;;;;AAEA,OAAOC,YAAP,IAAqBC,MAArB;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AACA,OAAOC,WAAP;AACA,eAAe,SAASC,GAAT,GAAe;AAE7B,kBAAyBN,QAAQ,CAAC;AACjCO,IAAAA,KAAK,EAACL,MAAM,CAACM;AADoB,GAAD,CAAjC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAaC,QAAb;;AAIA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB,QAAGF,KAAK,CAACF,KAAN,KAAgBL,MAAM,CAACM,IAA1B,EAAgC;AAC/BE,MAAAA,QAAQ,CAAC;AACRH,QAAAA,KAAK,EAACL,MAAM,CAACU;AADL,OAAD,CAAR;AAGA,KAJD,MAIO;AACNF,MAAAA,QAAQ,CAAC;AACRH,QAAAA,KAAK,EAACL,MAAM,CAACM;AADL,OAAD,CAAR;AAGA;AACD,GAVD;;AAYA,SACC,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEC,KAAK,CAACF;AAApC,KACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC;AAApB,KACC,oBAAC,QAAD,kBADD,EAIC,oBAAC,SAAD,mgBAJD,EASC,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAEH;AAA1B,IATD,CADD,CADD;AAeA;AAED,IAAME,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{useState} from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport ThemeContext,{themes} from './ThemeContext';\nimport Headline from './Headline';\nimport Paragraph from './Paragraph';\nimport ThemeButton from './ThemeButton';\nexport default function App() {\n\t\n\tconst [state,setState] = useState({\n\t\ttheme:themes.dark\n\t})\n\t\n\tconst toggleTheme = () => {\n\t\tif(state.theme === themes.dark) {\n\t\t\tsetState({\n\t\t\t\ttheme:themes.light\n\t\t\t})\n\t\t} else {\n\t\t\tsetState({\n\t\t\t\ttheme:themes.dark\n\t\t\t})\n\t\t}\n\t}\n\t\n\treturn (\n\t\t<ThemeContext.Provider value={state.theme}>\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Headline>\n\t\t\t\tContext\n\t\t\t\t</Headline>\n\t\t\t\t<Paragraph>\n\t\t\t\tContext provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nIn a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\n\t\t\t\t</Paragraph>\n\t\t\t\t<ThemeButton toggleTheme={toggleTheme}/>\n\t\t\t</View>\n\t\t</ThemeContext.Provider>\n\t);\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}